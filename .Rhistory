ncol = length(unique(reduced_summary$baseSTAS)),
byrow = TRUE))
colnames(traj.meanR)[2:ncol(traj.meanR)] <- unique(reduced_summary$baseSTAS)
fin.propR <- data.frame(Exploitation.Rate = unique(reduced_summary$baseER),
matrix(reduced_summary$endsuc,
nrow = length(unique(reduced_summary$baseER)),
ncol = length(unique(reduced_summary$baseSTAS)),
byrow = TRUE))
colnames(fin.propR)[2:ncol(fin.propR)] <- unique(reduced_summary$baseSTAS)
traj.propR <- data.frame(Exploitation.Rate = unique(reduced_summary$baseER),
matrix(reduced_summary$trajprop,
nrow = length(unique(reduced_summary$baseER)),
ncol = length(unique(reduced_summary$baseSTAS)),
byrow = TRUE))
colnames(traj.propR)[2:ncol(traj.propR)] <- unique(reduced_summary$baseSTAS)
full_summary %>% filter(baseSTAS <0.031) %>%
mutate(endsucC = ifelse(endsuc < 0.11, "0-0.10",
ifelse(endsuc >= 0.11 & endsuc <= 0.33, "0.11-0.33",
ifelse(endsuc > 0.33 & endsuc < 0.66, "0.34-0.65",
ifelse(endsuc >= 0.66 & endsuc < 0.9, "0.66-0.89",
"0.90-1"))))) %>%
ggplot(aes(x = baseSTAS, y = baseER, fill = endsucC, z = endsucC)) +
geom_raster() +
scale_y_reverse(expand = c(0, 0)) +
scale_fill_manual(values = Ccols,
name = "Proportion of 'Final Success'") +
theme(legend.position = "top", legend.text = element_text(size = 10),
legend.title = element_text(size = 13)) +
guides(fill = guide_legend(ncol = 2), title.position = "top") +
labs(y = "Exploitation Rate", x = "Marine Survival") +
#geom_contour() +
scale_x_continuous(expand = c(0, 0)) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.15, xend = aveSTAS, yend = 0.15),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.36, xend = aveSTAS, yend = 0.36),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.2, xend = aveSTAS, yend = 0.2),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.3, xend = aveSTAS, yend = 0.3),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.45, xend = aveSTAS, yend = 0.45),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = aveSTAS, y = 0.15, xend = aveSTAS, yend = maxER),
colour = "blue", size = 1.2, alpha = 0.1) +
annotate("text", x = aveSTAS + 0.001, y = 0.15, label = "3 Generation Mean", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.35, label = "Umsy", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.2, label = "PST Low", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.3, label = "PST Moderate", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.45, label = "PST Abundant", hjust = 0)
# geom_segment(aes(x = minSTAS-0.0005, y = aveER+sdER, xend = STASsdlo, yend = aveER+sdER),
#              colour = "gray", linetype = 2, size = 1.2, alpha = 0.1) +
# geom_segment(aes(x = minSTAS-0.0005, y = aveER-sdER, xend = STASsdhi, yend = aveER-sdER),
#              colour = "gray", linetype = 2, size = 1.2, alpha = 0.1) +
# geom_segment(aes(x = STASsdlo, y = maxER, xend = STASsdlo, yend = aveER+sdER),
#              colour = "gray", linetype = 2, size = 1.2, alpha = 0.1) +
# geom_segment(aes(x = STASsdhi, y = maxER, xend = STASsdhi, yend = aveER-sdER),
#              colour = "gray", linetype = 2, size = 1.2, alpha = 0.1)
ggsave(filename = paste("Data_out/", "Full_Sum_Final_Success_Cate_65",".png", sep = ""),
width = 5, height = 5.75, units = "in", dpi = 500)
full_summary %>% filter(baseSTAS <0.031) %>%
mutate(trajpropC = ifelse(trajprop < 0.11, "0-0.10",
ifelse(trajprop >= 0.11 & trajprop <= 0.33, "0.11-0.33",
ifelse(trajprop > 0.33 & trajprop < 0.66, "0.34-0.65",
ifelse(trajprop >= 0.66 & trajprop < 0.9, "0.66-0.89",
"0.90-1"))))) %>%
ggplot(aes(x = baseSTAS, y = baseER, fill = trajpropC, z = trajpropC)) +
geom_raster() +
scale_y_reverse(expand = c(0, 0)) +
scale_fill_manual(values = Ccols,
name = "Proportion of 'Positive Trajectories'") +
theme(legend.position = "top", legend.text = element_text(size = 10),
legend.title = element_text(size = 13)) +
guides(fill = guide_legend(ncol = 2), title.position = "top") +
labs(y = "Exploitation Rate", x = "Marine Survival") +
#geom_contour() +
scale_x_continuous(expand = c(0, 0)) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.15, xend = aveSTAS, yend = 0.15),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.36, xend = aveSTAS, yend = 0.36),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.2, xend = aveSTAS, yend = 0.2),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.3, xend = aveSTAS, yend = 0.3),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.45, xend = aveSTAS, yend = 0.45),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = aveSTAS, y = 0.15, xend = aveSTAS, yend = maxER),
colour = "blue", size = 1.2, alpha = 0.1) +
annotate("text", x = aveSTAS + 0.001, y = 0.15, label = "3 Generation Mean", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.35, label = "Umsy", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.2, label = "PST Low", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.3, label = "PST Moderate", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.45, label = "PST Abundant", hjust = 0) #+
#geom_segment(aes(x = minSTAS-0.0005, y = aveER+sdER, xend = STASsdlo, yend = aveER+sdER),
#colour = "gray", linetype = 2, size = 1.2, alpha = 0.1) +
#geom_segment(aes(x = minSTAS-0.0005, y = aveER-sdER, xend = STASsdhi, yend = aveER-sdER),
#colour = "gray", linetype = 2, size = 1.2, alpha = 0.1) +
#geom_segment(aes(x = STASsdlo, y = maxER, xend = STASsdlo, yend = aveER+sdER),
#colour = "gray", linetype = 2, size = 1.2, alpha = 0.1) +
#geom_segment(aes(x = STASsdhi, y = maxER, xend = STASsdhi, yend = aveER-sdER),
#colour = "gray", linetype = 2, size = 1.2, alpha = 0.1)
ggsave(filename = paste("Data_out/", "Full_Sum_Positive_Traj_Cate",".png", sep = ""),
width = 5, height = 5.75, units = "in", dpi = 500)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
library(nlme)
library(scales)
library(tidyverse)
library(rstan)
library(shinystan)
library(bayesplot)
library(pkgbuild)
Ricker_mod <- readRDS("fit_nocap.rds")
Ricker_PriorCap_mod <- readRDS("fit_priorcap.rds")
Ricker <- as.data.frame(extract(Ricker_mod, pars = c("alpha", "beta", "gamma", "sigma")))
write.csv(Ricker, "Ricker.csv")
Ricker_PriorCap <- as.data.frame(extract(Ricker_PriorCap_mod, pars = c("alpha", "beta", "gamma", "sigma")))
write.csv(Ricker_PriorCap, "Ricker_PriorCap.csv")
#function for rounding numbers
round2 = function(x, digits) {
posneg = sign(x)
z = abs(x)*10^digits
z = z + 0.5 + sqrt(.Machine$double.eps)
z = trunc(z)
z = z/10^digits
z*posneg
}
Ncu=5 # number of CUs
Ntrials=500	# of trials to simulate (there is a precedent for running 500 trials - stability in forward simulation occurs at this number of iterations)
#Ntrials=10	# of trials to simulate - how many times do you want it to run for each combination of exploitation rate and survival (set to 500 once everythign is running)
CUname=c("Middle_Fraser","Fraser_Canyon","Lower_Thompson","North_Thompson","South_Thompson","IFC SMU")
#MUbench=33500			 	 #IFC SMU Target where there is a 66% probability of all CUs being amber or better status
MUbench=65300			 	 #IFC SMU Target where there is a 90% probability of all CUs being amber or better status
fyr=2018;lyr=fyr+14;Yr=seq(fyr,lyr);Nyrs=length(Yr)
fyrToUse=2022;lyrToUse=2031;NyrsToUse=lyrToUse-fyrToUse+1
imin=which(Yr==fyrToUse);imax=which(Yr==lyrToUse)	#range of years to include in status assessment
#calculate average proportion at age 3 per conservation unit
#simulation assumes static proportion of age 3 recruits
d0=read.csv(file="Data_in\\IFCoho_SRbyCU.csv",header=T)
pAge3=vector(length=Ncu)
for(icu in 1:Ncu){
d1=subset(d0,CU_ID==icu)
pAge3[icu]=mean(d1$Age_3_Rec/d1$Recruits)
}
lnSDstas = sd( c(log(d0$STAS_Age_3[which(d0$CU_ID == 1 & d0$BroodYear > 1999)] ), log(d0$STAS_Age_4[nrow(d0)]) )) # Standard Deviation of STAS to calculate lognormal error of STAS later
sigma <- sd( c(d0$ER_Age_3[d0$CU_ID == 1], d0$ER_Age_4[nrow(d0)] ))	# Standard Deviation of ER to calculate lognormal error of STAS later
d0 <- read.csv(file="Data_in\\IFCoho_escpByCU.csv",header=T)
ERset= c(0.068, # 1 SD below current (also 50% of current)
0.125, # current average
0.183, # 1 SD above current
seq(0, 0.5, by = 0.01))
STASset= c(0.003, # minimum observed, worst case scenario
#0.013, # current mean
0.041, # max in the current regime, best case scenario
#         seq(0.004, 0.04, by = 0.001))
seq(0.001, 0.04, by = 0.001))
fnout3 <- "Data_out/Fsim_All_Models_Full_Output.out"
write(file = fnout3, "Model baseER baseSTAS trial end.suc freq.suc traj_slope traj_percent", ncolumns = 1, append = F)
start_time <- Sys.time()
for(itype in 1:2){
ModName=switch(itype,"Ricker","Ricker_PriorCap")
BaseFN=paste("Fsim_", ModName,sep="")
fnout=paste("Data_out/", BaseFN,".out",sep="")
write(file=fnout,"ConObj STAS ER Mean.end Mean Ci0.1 Ci0.25 Ci0.50 Ci0.75 Ci0.90 traj_b traj_m traj_hi traj_lo", ncolumns=1, append=F)
fnout2 = paste("Data_out/", BaseFN, "_Esc.out", sep="")
write(file = fnout2, "Model baseER baseSTAS Ncu trial ry esc", ncolumns = 1, append = F)
#Posterior distribution from Ricker, Ricker-PriorCap, and Ricker-Dep of parameter sets to drive production dynamcs
p=read.csv(file=paste(ModName, ".csv",sep=""),header=T)
Nmcmc=dim(p)[1]
postrecs=round(runif(n=Ntrials,min=1,max=Nmcmc),digits=0)	#random pick of parameter sets for Ntrial simulations from posterior
write.table(matrix(postrecs, ncol = 1), file = paste("Data_out/", BaseFN, "_postrecs.out", sep = ""), row.names = F, col.names = "set")
for(istas in STASset){ # for every value in the marine survival set
BaseSTAS=istas
for(ih in ERset){ # for every value in the exploitation rate set
BaseER=ih
if(BaseER != 0) ERshape1 <- BaseER^2 * (((1-BaseER)/sigma^2) - (1/BaseER))
if(BaseER != 0) ERshape2 <- ERshape1 * (1/BaseER - 1)
TotEsc=matrix(nrow=Ntrials,ncol=Nyrs,data=0) # empty matrix to be filled with DU escapement values
Status=0	# To be filled by Mean Frequency of Success
Esc=array(data=0,dim=c(Ntrials,Nyrs,Ncu)) # empty array to be filled with CU escapement values
for (icu in 1:Ncu){
IniEsc=vector(length=4) #Get initial escapements 2012-2015
d1=subset(d0,CU_ID==icu & ReturnYear>=fyr & ReturnYear<=fyr+3)
IniEsc=d1$Escapement
# For selecting parameters later, combining paramater name with icu number
icol1=which(names(p)==paste("alpha.",icu,sep=""));icol2=which(names(p)==paste("beta.",icu,sep=""));icol3=which(names(p)==paste("gamma.",icu,sep=""))
for(isim in 1:Ntrials){
irow=postrecs[isim]	# assign initial posterior distribution starting row
for(iyr in 1:Nyrs){
# assign parameter values from set for CU
alpha=p[irow,icol1]
b=p[irow,icol2]
g=p[irow,icol3]
#						if(Yr[iyr]<=2017){
if(Yr[iyr]<=2021){
Sp=IniEsc[iyr]
Esc[isim,iyr,icu]=IniEsc[iyr]	#Use observed escapements for '14-'17
} else {
Sp=Esc[isim,iyr,icu]
}
if(iyr<=Nyrs-4){
if(iyr==1)LSurv4=log(rlnorm(1, meanlog = log(BaseSTAS), sdlog = lnSDstas))
if(iyr== 1 & LSurv4>log(0.0671))LSurv4=log(0.0671);if(iyr== 1 & LSurv4<log(0.0027))LSurv4=log(0.0027)
LSurv3 = LSurv4 # Marine Survivorship of this years Age 3s is the same as prior years Age 4s
LSurv=log(rlnorm(1, meanlog = log(BaseSTAS), sdlog = lnSDstas))	#account for variation in marine survival among years, adding lognormal variability
if(LSurv>log(0.0671))LSurv=log(0.0671);if(LSurv<log(0.0027))LSurv=log(0.0027) # bind LSurv by % above and below historic max and min
LSurv4 = LSurv # Age 4s get new STAS
# Aplpha, b, and g, are shared between Age 3 and 4 but LSurv is different
Rec3 = pAge3[icu] * exp(pAge3[icu] * (b*(Sp/1000) + g*LSurv3 + alpha) + (1 - pAge3[icu]) * (b*(Sp/1000) + g*LSurv4 + alpha)) * Sp
Rec4 = (1 - pAge3[icu]) * exp(pAge3[icu] * (b*(Sp/1000) + g*LSurv3 + alpha) + (1 - pAge3[icu]) * (b*(Sp/1000) + g*LSurv4 + alpha)) * Sp
#Rec is NaN or Inf because Sp is too large so X>700 in exp(X).
if(is.na(Rec3)==T | Rec3>1e6/2) Rec3=1e6/2
if(is.na(Rec4)==T | Rec4>1e6/2) Rec4=1e6/2 # I have however added an additional line for Rec4
if(iyr==1 & BaseER != 0){
ER4=rbeta(1, ERshape1, ERshape2)
} else if(iyr== 1 & BaseER == 0) {
ER4 = BaseER # assuming perfect 0 fishing rate, rbeta does not sample well at mu = 0
}
ER3 = ER4 # Exploitation Rate of this years Age 3s is the same as prior years Age 4s
if(BaseER != 0) {
ER4=rbeta(1, ERshape1, ERshape2) #account for variation in ER among years, adding beta distributed variability
} else if(BaseER == 0) {
ER4 = BaseER # assuming perfect 0 fishing rate
}
#Predict escapement in 3 and 4 years given recruitment and age structure
if(Yr[iyr+3]>=fyr) Esc[isim,iyr+3,icu]=Esc[isim,iyr+3,icu]+Rec3*(1-ER3)
Esc[isim,iyr+4,icu]=Esc[isim,iyr+4,icu]+Rec4*(1-ER4)
# Quasi-extirpation Threshold of 100 (from literature, i.e. an assumption).
if(Esc[isim,iyr+1,icu] <= 100 &
Esc[isim,iyr+2,icu] <= 100 &
Esc[isim,iyr+3,icu] <= 100) Esc[isim,c(iyr+1, iyr+2,iyr+3, iyr+4),icu] = 0
}
}
}#isim
icuEsc <- data.frame(Model = rep(ModName, Ntrials*length(Yr)),
baseER = rep(BaseER, Ntrials*length(Yr)),
baseSTAS = rep(BaseSTAS, Ntrials*length(Yr)),
Ncu = rep(icu, Ntrials*length(Yr)),
trial = rep(c(1:Ntrials), each = length(Yr)),
ry = rep(Yr, Ntrials),
esc = as.vector(t(Esc[ , , icu])))
write.table(file=fnout2, icuEsc, append=T, row.names = F, col.names = F) # Save Simulation Data
CP=matrix(data=0,nrow=Ntrials,ncol=5) #Compute confidence intervals on conservation performance
}#icu
#Calculate DU geomean and proportion of simulation-years where geometric mean escapent for all CUs exceed the 1000 spawner requirements (for all subpops) for all CUs in same year
for(isim in 1:Ntrials){
for(iyr in 1:Nyrs){
TotEsc[isim,iyr]=sum(Esc[isim,iyr,1:Ncu])
}
}
Pass2=matrix(data=0,nrow=Ntrials,ncol=NyrsToUse)
GeoMean=matrix(data=0,nrow=Ntrials,ncol=NyrsToUse)
for(isim in 1:Ntrials){
jj=0
for(ii in imin:imax){
jj=jj+1
GeoMean[isim,jj]=prod(TotEsc[isim,ii-2],TotEsc[isim,ii-1], TotEsc[isim,ii])^(1/3)
}
CP[isim,5]=length(which(GeoMean[isim,1:NyrsToUse]>=MUbench))/NyrsToUse	#proportion of years where target exceeded for each trial
CP[isim,1]= ifelse(GeoMean[isim,NyrsToUse]>=MUbench, 1, 0)	#was target exceeded for each trial's last year
}
Status=length(which(GeoMean>=MUbench))/(Ntrials*NyrsToUse)
Status2 = mean(CP[ , 1])
CI_MUhi=as.numeric(quantile(CP[,5],prob=c(0.1, 0.25, 0.50, 0.75, 0.9)))
#### Population Trajectory Estimate ###
AriMean=matrix(data=0,nrow=Ntrials,ncol=NyrsToUse)
for(isim in 1:Ntrials){
jj=0
for(ii in imin:imax){
jj=jj+1
AriMean[isim,jj]=mean(TotEsc[isim,ii-2], TotEsc[isim,ii-1], TotEsc[isim,ii])
}
}
traj <- data.frame(trial = rep(c(1:Ntrials), each = NyrsToUse),
ry = rep(Yr[imin:imax], Ntrials),
esc = as.vector(t(AriMean)))
traj$lnesc <- log(traj$esc+1) # can't have ln(0), i.e. when fish were extirpated
traj_out <- matrix(data=0,nrow=Ntrials,ncol=2)
for(sim in 1:Ntrials){
traj.mod <- gls(lnesc~ry, data = traj[traj$trial == sim, ], corr = corAR1(), method = "ML", control = lmeControl(opt = "optim"))
traj_out[sim,1] <- round(coef(traj.mod)[2],3)
traj_out[sim,2] <- round((exp(coef(traj.mod)[2]*10)-1)*100, 1)
}
traj_b <- mean(traj_out[ , 1])
traj_m <- mean(traj_out[ , 2])
traj_quantile <- quantile(traj_out[,2],prob=c(0.1, 0.25, 0.5, 0.75, 0.9))
write(file=fnout,c("MU_Target", BaseSTAS, BaseER, Status2, Status, CI_MUhi,
traj_b, traj_m, traj_out), ncolumns=14,append=T)
full_out <- data.frame(Model = rep(ModName, Ntrials),
baseER = rep(BaseER, Ntrials),
baseSTAS = rep(BaseSTAS, Ntrials),
trial = c(1:Ntrials),
suc.end = CP[ , 1],
suc.freq = CP[ ,5],
traj_slope = traj_out[ ,1],
traj_percent = traj_out[ ,2]
)
write.table(file=fnout3, full_out, append=T, row.names = F, col.names = F) # Save FULL Simulation Data
}#end harvest
}#end marine survival
}#end model types
end_time <- Sys.time()
end_time - start_time
rm(list=ls())
round2 = function(x, digits) {
posneg = sign(x)
z = abs(x)*10^digits
z = z + 0.5 + sqrt(.Machine$double.eps)
z = trunc(z)
z = z/10^digits
z*posneg
}
library(openxlsx)
library(scales)
library(RColorBrewer); library(tidyverse)
library(ggplot2); library(dplyr); library(tidyr)
library(cowplot)
theme_set(theme_cowplot())
CUs <- c("Middle_Fraser","Fraser_Canyon","Lower_Thompson","North_Thompson","South_Thompson")
CUnm <- c("Middle Fraser","Fraser Canyon","Lower Thompson","North Thompson","South Thompson")
xcol=c('#8c510a','#d8b365','#c7eae5','#5ab4ac','#01665e') # colours of curves et al.
Ccols <- c("0-0.10" = '#d01c8b', "0.11-0.33" = '#f1b6da',
"0.34-0.65" = '#f7f7f7',
"0.66-0.89" = '#b8e186', "0.90-1" = '#4dac26')
Ccols2 <- c("< -49" = '#d01c8b', "-49:-30" = '#f1b6da',
"-29:29" = '#f7f7f7',
"30:49" = '#b8e186', "> 49" = '#4dac26')
obsr=read.csv(file="Data_in\\IFCoho_SRbyCU.csv",header=T)
full_out <- read.table(paste("Data_out/Fsim_All_Models_Full_Output", ".out", sep = ""), header = T)
full_out$traj_prop <- ifelse(full_out$traj_percent > 0 , 1, 0)
fuller <- unique(full_out$baseER)
fullSTAS <- unique(full_out$baseSTAS)
models <- unique(full_out$Model)
STASstable <- c(obsr$STAS_Age_3[obsr$CU_ID == 5 & obsr$BroodYear > 2009], obsr$STAS_Age_4[nrow(obsr)])
aveER = exp(mean(log(c(0.205,	0.358,	0.24,	0.092,	0.097,	0.153,	0.217,	0.137,	0.095))))
aveSTAS = exp(mean(log(STASstable))) #geometric mean of STAS
minSTAS = min(fullSTAS)
maxER = 0.5
sdER = 0.057
STASsdlo = exp(mean(log(STASstable))-sd(log(STASstable)))
STASsdhi = exp(mean(log(STASstable))+sd(log(STASstable)))
write(file = "Data_out/Fsim_BootStrapped_Data.out",
"baseER baseSTAS prop.fin traj.prop", ncolumns = 1, append = F)
for(er in fuller){
full_erA <- full_out[full_out$baseER == er, ]
for(STAS in fullSTAS){
full_datA <- full_erA[full_erA$baseSTAS == STAS, ]
for(n in 1:500){
#    for(n in 1:100){
sam <- sample(1500, size = 1500, replace = TRUE)
#      sam <- sample(300, size = 300, replace = TRUE)
#            bootdat <- full_datA[sam, ]
bootdat <- full_datA[sam, ] %>% na.omit()
boot_row = data.frame(
baseER = er,
baseSTAS = STAS,
prop.fin = round2(mean(bootdat$end.suc), 2),
traj.prop = round(mean(bootdat$traj_prop), 2))
write.table(file="Data_out/Fsim_BootStrapped_Data.out",
boot_row, append=T, row.names = F, col.names = F)
}
}
}
bootCI <- read.table("Data_out/Fsim_BootStrapped_Data.out", header = T)
write(file = "Data_out/Fsim_Summary_Data.out",
"baseER baseSTAS endsuc endsuc10 endsuc90 freqsuc freq10 freq50 freq90 trajmean traj10 traj50 traj90 trajprop trajpop10 trajpop90", ncolumns = 1, append = F)
for(er in fuller){
full_erA <- full_out[full_out$baseER == er, ]
boot_erA <- bootCI[bootCI$baseER == er, ]
for(STAS in fullSTAS){
full_datA <- full_erA[full_erA$baseSTAS == STAS, ]
boot_datA <- boot_erA[boot_erA$baseSTAS == STAS, ]
full_sum <- data.frame(ER = er,
STAS = STAS,
prop.fin = round(mean(full_datA$end.suc), 2),
prop.fin.10 = round(quantile(boot_datA$prop.fin, prob = 0.1), 2),
prop.fin.90 = round(quantile(boot_datA$prop.fin, prob = 0.9), 2),
prop.all = round(mean(full_datA$freq.suc), 2),
all.10 = round(quantile(full_datA$freq.suc, prob = 0.1), 2),
all.50 = round(quantile(full_datA$freq.suc, prob = 0.5), 2),
all.90 = round(quantile(full_datA$freq.suc, prob = 0.9), 2),
traj.mean = round(mean(full_datA$traj_percent), 0),
traj.10 = round(quantile(full_datA$traj_percent, prob = 0.1), 0),
traj.50 = round(quantile(full_datA$traj_percent, prob = 0.5), 0),
traj.90 = round(quantile(full_datA$traj_percent, prob = 0.9), 0),
traj.prop = round(mean(full_datA$traj_prop), 2),
traj.prop.10 = round(quantile(boot_datA$traj.prop, prob = 0.1), 2),
traj.prop.90 = round(quantile(boot_datA$traj.prop, prob = 0.9), 2))
#    write.table(file="./Fsim_Full_Output/Fsim_Summary_Data_2.out",
write.table(file="Data_out/Fsim_Summary_Data.out",
full_sum, append=T, row.names = F, col.names = F)
}
}
full_summary <- read.table(file="Data_out/Fsim_Summary_Data.out", header = T)
#full_summary <- read.table(file="./Fsim_Full_Output/Fsim_Summary_Data_2.out", header = T)
full_summary$fros.median <- with(full_summary, paste(freq50, " (", freq10, ", ", freq90, ")", sep = ""))
full_summary$traj.median <- with(full_summary, paste(traj50, " (", traj10, ", ", traj90, ")", sep = ""))
full_summary$fros.mean <- with(full_summary, paste(freqsuc, " (", freq10, ", ", freq90, ")", sep = ""))
full_summary$traj.mean <- with(full_summary, paste(trajmean, " (", traj10, ", ", traj90, ")", sep = ""))
full_summary <- full_summary[order(full_summary$baseER, full_summary$baseSTAS), ]
full_summary0 <- full_summary
reduced_summary <- full_summary %>%
filter(baseER %in% c(0, 0.03, 0.068, 0.125, 0.183, 0.20, 0.25, 0.30, 0.35, 0.4, 0.45, 0.5),
baseSTAS %in% c(0.003, 0.007, 0.010, 0.016, 0.021, 0.04))
write.csv(reduced_summary, "Data_out/Fsim_Reduced_Summary.csv", row.names = F)
full_summary <- full_summary %>% filter(baseER < 0.51, baseSTAS < 0.041,
baseER != 0.068, baseER != 0.125, baseER != 0.183,
baseSTAS != 0.0045, baseSTAS != 0.0141, baseSTAS != 0.0237)
fros.median <- data.frame(Exploitation.Rate = unique(full_summary$baseER),
matrix(full_summary$fros.median,
nrow = length(unique(full_summary$baseER)),
ncol = length(unique(full_summary$baseSTAS)),
byrow = TRUE))
colnames(fros.median)[2:ncol(fros.median)] <- unique(full_summary$baseSTAS)
traj.median <- data.frame(Exploitation.Rate = unique(full_summary$baseER),
matrix(full_summary$traj.median,
nrow = length(unique(full_summary$baseER)),
ncol = length(unique(full_summary$baseSTAS)),
byrow = TRUE))
colnames(traj.median)[2:ncol(traj.median)] <- unique(full_summary$baseSTAS)
traj.mean <- data.frame(Exploitation.Rate = unique(full_summary$baseER),
matrix(full_summary$traj.mean,
nrow = length(unique(full_summary$baseER)),
ncol = length(unique(full_summary$baseSTAS)),
byrow = TRUE))
colnames(traj.mean)[2:ncol(traj.mean)] <- unique(full_summary$baseSTAS)
fin.prop <- data.frame(Exploitation.Rate = unique(full_summary$baseER),
matrix(full_summary$endsuc,
nrow = length(unique(full_summary$baseER)),
ncol = length(unique(full_summary$baseSTAS)),
byrow = TRUE))
colnames(fin.prop)[2:ncol(fin.prop)] <- unique(full_summary$baseSTAS)
traj.prop <- data.frame(Exploitation.Rate = unique(full_summary$baseER),
matrix(full_summary$trajprop,
nrow = length(unique(full_summary$baseER)),
ncol = length(unique(full_summary$baseSTAS)),
byrow = TRUE))
colnames(traj.prop)[2:ncol(traj.prop)] <- unique(full_summary$baseSTAS)
fros.medianR <- data.frame(Exploitation.Rate = unique(reduced_summary$baseER),
matrix(reduced_summary$fros.median,
nrow = length(unique(reduced_summary$baseER)),
ncol = length(unique(reduced_summary$baseSTAS)),
byrow = TRUE))
colnames(fros.medianR)[2:ncol(fros.medianR)] <- unique(reduced_summary$baseSTAS)
traj.medianR <- data.frame(Exploitation.Rate = unique(reduced_summary$baseER),
matrix(reduced_summary$traj.median,
nrow = length(unique(reduced_summary$baseER)),
ncol = length(unique(reduced_summary$baseSTAS)),
byrow = TRUE))
colnames(traj.medianR)[2:ncol(traj.medianR)] <- unique(reduced_summary$baseSTAS)
traj.meanR <- data.frame(Exploitation.Rate = unique(reduced_summary$baseER),
matrix(reduced_summary$traj.mean,
nrow = length(unique(reduced_summary$baseER)),
ncol = length(unique(reduced_summary$baseSTAS)),
byrow = TRUE))
colnames(traj.meanR)[2:ncol(traj.meanR)] <- unique(reduced_summary$baseSTAS)
fin.propR <- data.frame(Exploitation.Rate = unique(reduced_summary$baseER),
matrix(reduced_summary$endsuc,
nrow = length(unique(reduced_summary$baseER)),
ncol = length(unique(reduced_summary$baseSTAS)),
byrow = TRUE))
colnames(fin.propR)[2:ncol(fin.propR)] <- unique(reduced_summary$baseSTAS)
traj.propR <- data.frame(Exploitation.Rate = unique(reduced_summary$baseER),
matrix(reduced_summary$trajprop,
nrow = length(unique(reduced_summary$baseER)),
ncol = length(unique(reduced_summary$baseSTAS)),
byrow = TRUE))
colnames(traj.propR)[2:ncol(traj.propR)] <- unique(reduced_summary$baseSTAS)
full_summary %>% filter(baseSTAS <0.031) %>%
mutate(endsucC = ifelse(endsuc < 0.11, "0-0.10",
ifelse(endsuc >= 0.11 & endsuc <= 0.33, "0.11-0.33",
ifelse(endsuc > 0.33 & endsuc < 0.66, "0.34-0.65",
ifelse(endsuc >= 0.66 & endsuc < 0.9, "0.66-0.89",
"0.90-1"))))) %>%
ggplot(aes(x = baseSTAS, y = baseER, fill = endsucC, z = endsucC)) +
geom_raster() +
scale_y_reverse(expand = c(0, 0)) +
scale_fill_manual(values = Ccols,
name = "Proportion of 'Final Success'") +
theme(legend.position = "top", legend.text = element_text(size = 10),
legend.title = element_text(size = 13)) +
guides(fill = guide_legend(ncol = 2), title.position = "top") +
labs(y = "Exploitation Rate", x = "Marine Survival") +
#geom_contour() +
scale_x_continuous(expand = c(0, 0)) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.15, xend = aveSTAS, yend = 0.15),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.36, xend = aveSTAS, yend = 0.36),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.2, xend = aveSTAS, yend = 0.2),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.3, xend = aveSTAS, yend = 0.3),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = minSTAS-0.0005, y = 0.45, xend = aveSTAS, yend = 0.45),
colour = "blue", size = 1.2, alpha = 0.1) +
geom_segment(aes(x = aveSTAS, y = 0.15, xend = aveSTAS, yend = maxER),
colour = "blue", size = 1.2, alpha = 0.1) +
annotate("text", x = aveSTAS + 0.001, y = 0.15, label = "3 Generation Mean", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.35, label = "Umsy", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.2, label = "PST Low", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.3, label = "PST Moderate", hjust = 0)+
annotate("text", x = aveSTAS + 0.001, y = 0.45, label = "PST Abundant", hjust = 0)
# geom_segment(aes(x = minSTAS-0.0005, y = aveER+sdER, xend = STASsdlo, yend = aveER+sdER),
#              colour = "gray", linetype = 2, size = 1.2, alpha = 0.1) +
# geom_segment(aes(x = minSTAS-0.0005, y = aveER-sdER, xend = STASsdhi, yend = aveER-sdER),
#              colour = "gray", linetype = 2, size = 1.2, alpha = 0.1) +
# geom_segment(aes(x = STASsdlo, y = maxER, xend = STASsdlo, yend = aveER+sdER),
#              colour = "gray", linetype = 2, size = 1.2, alpha = 0.1) +
# geom_segment(aes(x = STASsdhi, y = maxER, xend = STASsdhi, yend = aveER-sdER),
#              colour = "gray", linetype = 2, size = 1.2, alpha = 0.1)
ggsave(filename = paste("Data_out/", "Full_Sum_Final_Success_Cate_65",".png", sep = ""),
width = 5, height = 5.75, units = "in", dpi = 500)
